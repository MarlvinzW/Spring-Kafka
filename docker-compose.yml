version: "3.8"

services:

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    restart: on-failure
    networks:
      - app
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    restart: on-failure
    networks:
      - app
    ports:
      - "9092:9092"

    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: ${BROKER_ID}
      KAFKA_CREATE_TOPICS: "testTopic:1:1,testTopic2:1:1"

    depends_on:
      - zookeeper


  spring_app:
    container_name: app
    restart: on-failure
    links:
      - kafka
    networks:
      - app
    depends_on:
      - kafka
    ports:
      - "8080:8080"

    environment:
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: ${BROKER_ID}
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092

      WAIT_HOSTS: kafka:9092
      WAIT_BEFORE: 30
      WAIT_TIMEOUT: 300
      WAIT_SLEEP_INTERVAL: 30
      WAIT_HOST_CONNECT_TIMEOUT: 30

    build:
      context: .
      dockerfile: Dockerfile

networks:
  app:
  